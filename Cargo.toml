[package]
name = "rgb_node"
description = "RGB node"
version = "0.7.0"
authors = ["Dr. Maxim Orlovsky <orlovsky@lnp-bp.org>"]
license = "MIT"
keywords = ["bitcoin", "node", "layer-2", "smart-contracts", "rgb"]
edition = "2018"
readme = "README.md"
exclude = [".github", "/data", "/sample", "Dockerfile"]

[lib]
name = "rgb_node"

[[bin]]
name = "rgbd"
required-features = ["server"]

[[bin]]
name = "stashd"
required-features = ["server"]

[[bin]]
name = "fungibled"
required-features = ["server"]

[[bin]]
name = "rgb-cli"
required-features = ["cli"]

[dependencies]
# LNP/BP crates
amplify = "3.12.0"
stens = "0.3.2"
strict_encoding = "1.8.8"
commit_verify = "0.7.0"
lnpbp = "0.7.0"
descriptor-wallet = { version = "0.7.1", features = ["electrum"] }
bp-core = "0.7.0"
rgb-core = "0.7.0-rc.1"
rgb20 = { version = "0.7.0-rc.1", optional = true }
# rgb21 = { git = "https://github.com/rgb-org/rgb-core", optional = true }
# rgb22 = { git = "https://github.com/rgb-org/rgb-core", optional = true }
# rgb23 = { git = "https://github.com/rgb-org/rgb-core", optional = true }
internet2 = "0.7.0"
microservices = { version = "0.7.0", default-features = false }
# Bitcoin
bitcoin = "0.28.1"
electrum-client = { version = "0.10.1", optional = true }
# Rust language
lazy_static = "1.4"
nix = { version = "0.20", optional = true }
chrono = "0.4"
diesel = { version = "1.4", optional = true, features = ["sqlite", "uuid", "numeric", "chrono"] }
hammersbald = { version = "2.4", optional = true }
# Serialization & parsing
serde_crate = { package = "serde", version = "1", features = ["derive"], optional = true }
serde_with = { version = "1.8", optional = true }
serde_json = { version = "1", optional = true }
serde_yaml = { version = "0.8", optional = true }
toml = { version = "0.5", optional = true }
bech32 = "0.9.0"
base64 = { version = "0.12", optional = true }
# Congig & logging
log = { version = "0.4", features = ["max_level_trace", "release_max_level_debug"] }
env_logger = "0.7"
clap = { version = "3.1", optional = true, features = ["derive", "env"] }
settings = { version = "0.10", package = "config", optional = true }
configure_me = { version = "0.3", optional = true }
dotenv = { version = "0.15", optional = true }
colored = { version = "2", optional = true }
shellexpand = { version = "2", optional = true }

# Recommended set of features:
# 1. Standalone node: `server` (=`node`+`shell`)
# 2. Cli to remote node: `cli` (auto includes `shell` and `integration`)
# 3. Mobile app talking to a server: `client`
# 4. Mobile app with embedded node: `embedded` (auto includes `client` + `node`)
# 5. Simple cli utility app: `shell`
[features]
default = ["client", "fungibles"]
all = [
    "server", "cli", "serde", "tor", "nosql", # "sql",
    "fungibles", # "collectibles", "identities", "auditlogs"
]

# Server is a standalone application that runs daemon
server = ["node", "shell", "nix", "microservices/server"]
# Command-line application feature
cli = ["shell", "client", "serde", "microservices/cli"]

# Embedded is an app that contains embedded node and that talks to it through
# integration layer
embedded = ["client", "node", "microservices/embedded"]
# Server node can be run as a part of mobile app and other types of clients;
# thus `server` != `node`.
# This feature results in building with features not required for command-line
node = ["serde", "internet2/keygen", "bitcoin/rand", "internet2/zmq", "microservices/node",
        "internet2/url", "electrum-client", "base64",
        # Required for storing config and cache
        "_config", "_rpc"]
# Feature is required for any applications that talks to daemon processes
client = ["internet2/zmq", "microservices/client", "microservices/node", "bitcoin/rand",
          "electrum-client", "base64",
          "internet2/url", "clap", "_rpc"]
# Required for all apps that can be launched from command-line shell as binaries
# (i.e. both servers and cli)
shell = [
    "dotenv", "clap", "settings", "configure_me", "serde",
    "amplify/parse_arg", "microservices/shell", "shellexpand", "colored"
]

# Internally used features for convenience
_config = ["serde_yaml", "toml"]
_rpc = []

serde = ["serde_crate", "serde_with", "serde_yaml", "serde_json", "toml",
         "amplify/serde", "lnpbp/serde", "internet2/serde", "microservices/serde",
         "chrono/serde", "bitcoin/use-serde", "rgb20/serde"]
tor = ["microservices/tor", "internet2/tor"]
# sql = ["diesel"]
nosql = ["hammersbald"]

# Schema-specific components exposed as features:
fungibles = ["rgb20"]
# collectibles = ["rgb21"]
# identities = ["rgb22"]
# auditlogs = ["rgb23"]
